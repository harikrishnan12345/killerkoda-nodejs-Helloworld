name: Build and Update Manifest

on:
  push:
    branches: [ main ]
    paths:
      - 'app/**'

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  IMAGE_NAME: nodejs-k8s-demo

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Generate image tag
      id: image-tag
      run: |
        SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
        echo "tag=${SHORT_SHA}" >> $GITHUB_OUTPUT
        echo "full_image=${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${SHORT_SHA}" >> $GITHUB_OUTPUT

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: ./app
        push: true
        tags: |
          ${{ steps.image-tag.outputs.full_image }}
          ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Update Kubernetes deployment manifest
      run: |
        sed -i "s|image: .*|image: ${{ steps.image-tag.outputs.full_image }}|g" k8s/deployment.yaml
        cat k8s/deployment.yaml

    - name: Commit and push manifest changes
      run: |
        git config --global user.name "GitHub Actions Bot"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        
        git add k8s/deployment.yaml
        
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "ü§ñ Update image to ${{ steps.image-tag.outputs.tag }} [skip ci]"
          git push origin main
          echo "‚úÖ Manifest updated and pushed"
        fi

  notify:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Deployment Status
      run: |
        if [ "${{ needs.build-and-push.result }}" == "success" ]; then
          echo "‚úÖ Build successful! ArgoCD will sync automatically."
          echo "‚è∞ Check ArgoCD in ~3 minutes for the update."
        else
          echo "‚ùå Build failed. Check logs."
          exit 1
        fi
